@page "/books/add"
@rendermode InteractiveWebAssembly

@using BookCatalogClient.Models

@inject IConfiguration Config
@inject ILogger<Books> logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>AddBook</PageTitle>

<h3>Add New Book</h3>

<div class="form-group">
    <label for="name">Title</label>
    <input id="name" class="form-control" @bind="newBook.Title" required />
    @if (string.IsNullOrWhiteSpace(newBook.Title))
    {
        <span class="text-danger">Name is required.</span>
    }
</div>
<div class="form-group">
    <label for="author">Author</label>
    <input id="author" class="form-control" @bind="newBook.Author" />
</div>
<div class="form-group">
    <label for="genre">Genre</label>
    <input id="genre" class="form-control" @bind="newBook.Genre" />
</div>
<div class="form-group">
    <label for="date">Date</label>
    <input id="date" type="date" class="form-control" @bind="newBook.Date" />
</div>
<div class="form-group">
    <label for="summary">Summary</label>
    <textarea id="summary" class="form-control" @bind="newBook.Summary"></textarea>
</div>
<button class="btn btn-primary mt-2" @onclick="SaveBook">Save</button>
<button class="btn btn-secondary mt-2" @onclick="Cancel">Cancel</button>

@code {
    private BookItem newBook = new BookItem();
    private string? serviceEndpoint;

    protected override void OnInitialized()
    {
        var api = Config.GetValue<string>("API_URI");
        serviceEndpoint = $"{api}/books";
    }

    private async Task SaveBook()
    {
        if (!string.IsNullOrWhiteSpace(newBook.Title))
        {
            var addItem = new BookItem { Title = newBook.Title, Author = newBook.Author, Date = newBook.Date, Genre=newBook.Genre, Summary = newBook.Summary };
            await Http.PostAsJsonAsync($"{serviceEndpoint}", addItem);
            newBook = new();
            NavigationManager.NavigateTo("/books");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/books");
    }
}