@page "/books"
@rendermode InteractiveWebAssembly

@using BookCatalogClient.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers

@inject IConfiguration Config
@inject ILogger<Books> logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<PageTitle>Books</PageTitle>

<h1>Books</h1>

<div>
    <input class="form-control mb-3" placeholder="Filter by Title, Author, Genre" @bind-value:event="oninput" @bind-value="FilterText" />
    <div class="form-group mb-3">
        <label for="rowsPerPage">Rows Per Page:</label>
        <select id="rowsPerPage" class="form-control" style="width: 150px; display: inline-block;" @bind="pagination.ItemsPerPage">
            @foreach (var value in rowsPerPageOptions)
            {
                <option value="@value">@value</option>
            }
        </select>
    </div>
    <QuickGrid ItemsProvider="itemsProvider" Pagination="pagination" @ref=grid>
        <PropertyColumn Title="Title" Property="b => b.Title" Sortable="true" />
        <PropertyColumn Title="Author" Property="b => b.Author" Sortable="true" />
        <PropertyColumn Title="Genre" Property="b => b.Genre" Sortable="true" />
        <PropertyColumn Title="Date" Property="b => b.Date" Sortable="true" />
        <PropertyColumn Title="Summary" Property="b => b.Summary" Sortable="true" />
        <TemplateColumn>
            <button class="btn btn-secondary" @onclick="() => NavigateToEditBook(context)">Edit</button>
            <button class="btn btn-secondary" @onclick="() => DeleteItem(context.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
    <button class="btn btn-primary mt-3" @onclick="NavigateToAddBook">Add New Book</button>
</div>

@code {
    private QuickGrid<BookItem>? grid;
    private BookItem editItem = new();
    private string apiEndpoint;
    private BookItem[]? bookItems;
    private string? filterText;
    private string FilterText
    {
        get { return filterText; }
        set
        {
            filterText = value;
            OnSearchInput(filterText);
        }
    }
    private HubConnection? hubConnection;
    private readonly int[] rowsPerPageOptions = { 5, 10, 20, 50 };
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private Timer? debounceTimer;
    private const int DebounceInterval = 1000;
    private BookItem[] items;

    private GridItemsProvider<BookItem>? itemsProvider;

    protected override async Task OnInitializedAsync()
    {
        var api = Config.GetValue<string>("API_URI");
        var ws = Config.GetValue<string>("WS_URI");
        apiEndpoint = $"{api}/books";

        itemsProvider = async req =>
        {
            var sortBy = req.GetSortByProperties().FirstOrDefault();
            var url = NavigationManager.GetUriWithQueryParameters(
                apiEndpoint, new Dictionary<string, object?>
                                {
                                    { nameof(filterText), filterText?.Length > 2 ? filterText : null },
                                    { "limit", pagination.ItemsPerPage },
                                    { "skip", req.StartIndex },
                                    { "sort", $"{sortBy.PropertyName}__{sortBy.Direction}" }
                                });

            var response = await Http.GetFromJsonAsync<BooksResult>(
                url, req.CancellationToken);

            items = response.Result;
            return GridItemsProviderResult.From(
                items: response.Result,
                totalItemCount: response.Total);
        };


        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{ws}/bookshub", o =>
                {
                    o.Transports = HttpTransportType.WebSockets;
                    o.SkipNegotiation = true;
                }).Build();

        hubConnection.On<BookItem>("BookUpdated", async book =>
        {
            var existingBook = items?.FirstOrDefault(b => b.Id == book.Id);
            logger.LogInformation(JsonSerializer.Serialize(book, new JsonSerializerOptions { WriteIndented = true }));
            logger.LogInformation("book is " + existingBook == null ? "NOT FOUND" : "Updated on backend");
            if (existingBook != null)
            {
                existingBook.Title = book.Title;
                existingBook.Author = book.Author;
                existingBook.Genre = book.Genre;
                existingBook.Date = book.Date;
                existingBook.Summary = book.Summary;
                StateHasChanged();
                // HighlightUpdatedBook(book.Id);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task OnSearchInput(string newFilterText)
    {
        if (debounceTimer != null)
        {
            debounceTimer.Stop();
            debounceTimer.Dispose();
        }

        debounceTimer = new Timer(DebounceInterval);
        debounceTimer.Elapsed += async (sender, args) =>
        {
            debounceTimer.Stop();
            debounceTimer.Dispose();
            if (filterText?.Length > 2) {
                filterText = newFilterText;
                await InvokeAsync(async () => await grid?.RefreshDataAsync());
            }
        };
        debounceTimer.Start();
    }

    // private void HighlightUpdatedBook(Guid bookId)
    // {
    //     var bookElement = document.getElementById($"book-{bookId}");
    //     if (bookElement != null)
    //     {
    //         bookElement.classList.add("highlight");
    //         setTimeout(() => bookElement.classList.remove("highlight"), 2000);
    //     }
    // }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void NavigateToAddBook()
    {
        NavigationManager.NavigateTo("/books/add");
    }

    private void NavigateToEditBook(BookItem book)
    {
        NavigationManager.NavigateTo($"/books/edit/{book.Id}");
    }

    private async Task DeleteItem(Guid id)
    {
        if (id != default)
        {
            await Http.DeleteAsync($"{apiEndpoint}/{id}");
            StateHasChanged();
        }
    }

    private record BooksResult(BookItem[] Result, int Total);
}
