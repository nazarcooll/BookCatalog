@page "/books"
@rendermode InteractiveWebAssembly

@using BookCatalogClient.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client

@inject IConfiguration Config
@inject ILogger<Books> logger
@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<PageTitle>Books</PageTitle>

<h1>Books</h1>

@if (bookItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <input class="form-control mb-3" placeholder="Filter by Name, Author, Date, or Summary" @bind="filterText" />
        <div class="form-group mb-3">
            <label for="rowsPerPage">Rows Per Page:</label>
            <input id="rowsPerPage" type="number" class="form-control" style="width: 100px; display: inline-block;" @bind="rowsPerPage" />
        </div>
        <QuickGrid Items="bookItems?.AsQueryable()" RowsPerPage="rowsPerPage">
            <PropertyColumn Title="Name" Property="b => b.Name" Sortable="true" />
            <PropertyColumn Title="Author" Property="b => b.Author" Sortable="true" />
            <PropertyColumn Title="Date" Property="b => b.Date" Sortable="true" />
            <PropertyColumn Title="Summary" Property="b => b.Summary" Sortable="true" />
            <TemplateColumn>
                <button class="btn btn-secondary" @onclick="() => NavigateToEditBook(context)">Edit</button>
                <button class="btn btn-secondary" @onclick="() => DeleteItem(context.Id)">Delete</button>
            </TemplateColumn>
        </QuickGrid>
        <button class="btn btn-primary mt-3" @onclick="NavigateToAddBook">Add New Book</button>
    </div>
}

@code {
    private BookItem editItem = new();
    private string? serviceEndpoint;
    private BookItem[]? bookItems;
    private string filterText = string.Empty;
    private int rowsPerPage = 5;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"https://localhost:57211/books";

        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl("ws://localhost:57210/bookshub", o =>
                {
                    o.Transports = HttpTransportType.WebSockets;
                    o.SkipNegotiation = true;
                }).Build();

        hubConnection.On<BookItem>("BookUpdated", book =>
        {
            var existingBook = bookItems.FirstOrDefault(b => b.Id == book.Id);
            if (existingBook != null)
            {
                existingBook.Name = book.Name;
                existingBook.Author = book.Author;
                existingBook.Date = book.Date;
                existingBook.Summary = book.Summary;

                StateHasChanged();
                // HighlightUpdatedBook(book.Id);
            }
        });

        await hubConnection.StartAsync();
        
        await GetBookItems();
    }

    // private void HighlightUpdatedBook(Guid bookId)
    // {
    //     var bookElement = document.getElementById($"book-{bookId}");
    //     if (bookElement != null)
    //     {
    //         bookElement.classList.add("highlight");
    //         setTimeout(() => bookElement.classList.remove("highlight"), 2000);
    //     }
    // }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task GetBookItems()
    {
        bookItems = await Http.GetFromJsonAsync<BookItem[]>(serviceEndpoint);
    }

    private void NavigateToAddBook()
    {
        NavigationManager.NavigateTo("/books/add");
    }

    private void NavigateToEditBook(BookItem book)
    {
        NavigationManager.NavigateTo($"/books/edit/{book.Id}");
    }

    private async Task DeleteItem(Guid id)
    {
        if (id != default) {
            await Http.DeleteAsync($"{serviceEndpoint}/{id}");
            await GetBookItems();
        }
    }
}
